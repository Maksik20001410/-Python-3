import telebot
import botik
import random
from telebot import types
import requests
from bs4 import BeautifulSoup as bs
from abc import ABCMeta, abstractstaticmethod

bot = telebot.TeleBot(botik.TOKEN)


#–∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å
class SiteScraper(metaclass=ABCMeta):
    @abstractstaticmethod
    def articles():
        """"""


class WeatherCheck(SiteScraper):
    def __init__(self):
        self.base_url = "https://global-weather.ru/pogoda/grodno/5days"
        self.headers = {"accept": "*/*",
                        "user-agent": "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) "
                                      "Chrome/78.0.3904.108 YaBrowser/19.12.4.25 Yowser/2.5 Safari/537.36"
                        }

    def articles(self):
        session = requests.Session()
        request = session.get(self.base_url, headers=self.headers)
        soup = bs(request.content, "html.parser")
        hrodna_weather = soup.find_all("div", attrs={'class': 'forecastDays'})
        wind = []
        for weath in hrodna_weather:
            wh = weath.find("p", attrs={'class': 'forecastDays__p'}).text
            wind.append(wh)

        return wind[0] + '\n\n' + wind[1] + '\n\n' + wind[2] + '\n\n' + wind[3] + '\n\n' + wind[4]


#–∫–ª–∞—Å—Å –ø–∞—Ä—Å–µ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π —Å —Å–∞–π—Ç–∞ tut.by
class TUTScraperWorld(SiteScraper):
    def __init__(self):
        self.name = 'tut.by'
        self.base_url = "https://news.tut.by/world/"
        self.headers = {"accept": "*/*",
           "user-agent": "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) "
                         "Chrome/78.0.3904.108 YaBrowser/19.12.4.25 Yowser/2.5 Safari/537.36"
          }

    def articles(self):
        session = requests.Session()
        request = session.get(self.base_url, headers=self.headers)
        soup = bs(request.content, "html.parser")
        tut_news = soup.find_all('div', attrs={'class': 'news-entry big annoticed time ni'})
        news_tutby = []
        for news in tut_news:
            header_tut = news.find("span", attrs={'class': 'entry-head _title'}).text
            text_tut = news.find("span", attrs={'class': 'entry-note'}).text
            news_tutby.append(
                '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –º–∏—Ä–∞:' + '\n' + header_tut + '.\n' + text_tut + '\n' + '–ò—Å—Ç–æ—á–Ω–∏–∫: ' + self.name)
        return random.choice(news_tutby)


class GRODNOScraper(SiteScraper):
    def __init__(self):
        self.name = '015.by'
        self.base_url = "https://www.015.by/news"
        self.headers = {"accept": "*/*",
                        "user-agent": "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) "
                                      "Chrome/78.0.3904.108 YaBrowser/19.12.4.25 Yowser/2.5 Safari/537.36"
                        }

    def articles(self):
        session = requests.Session()
        request = session.get(self.base_url, headers=self.headers)
        soup = bs(request.content, "html.parser")
        news_015by = soup.find_all('div', attrs={'class': 'c-news-card'})
        grodno_news = []
        for news in news_015by:
            text_grodno = news.find("div", attrs={'class': 'c-news-card__text'}).text
            grodno_news.append(
                '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –ì—Ä–æ–¥–Ω–æ:' + '\n' + text_grodno + '\n' + '–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç—É—Ç: ' + self.name)
        return random.choice(grodno_news)


#–Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
@bot.message_handler(commands=['start'])
def welcome(message):

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ù–æ–≤–æ—Å—Ç–∏ üìë")
    item2 = types.KeyboardButton("–í–∞–∫–∞–Ω—Å–∏–∏ üíª‚Äç")
    item3 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞ üå§")

    markup.add(item1, item2, item3)

    bot.send_message(message.chat.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {0.first_name}. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–º–æ–≥–∞—Ç—å "
                                      "–í–∞–º —É–∑–Ω–∞–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –º–∏—Ä–∞ –∏ –≥–æ—Ä–æ–¥–∞ –ì—Ä–æ–¥–Ω–æ, –∏—Å–∫–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ "
                                      "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ –≤ –≥–æ—Ä–æ–¥–µ –ì—Ä–æ–¥–Ω–æ –∏ –≤ –†–ë –∏ —É–∑–Ω–∞–≤–∞—Ç—å –æ –ø–æ–≥–æ–¥–µ "
                                      "–≤ –≥–æ—Ä–æ–¥–µ –ì—Ä–æ–¥–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.".format(message.from_user,
                                      bot.get_me()), parse_mode='html',reply_markup=markup)


#–æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
@bot.message_handler(content_types=['text'])
def botik(message):
    if message.chat.type == 'private':
        if message.text == '–ù–æ–≤–æ—Å—Ç–∏ üìë':

            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("–ú–∏—Ä", callback_data='WRLD')
            item2 = types.InlineKeyboardButton("–ì—Ä–æ–¥–Ω–æ", callback_data='GRDN')

            markup.add(item1, item2)

            bot.send_message(message.chat.id, '–ö–∞–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ —á–∏—Ç–∞—Ç—å?', reply_markup=markup)

        if message.text == '–ü–æ–≥–æ–¥–∞ üå§':
            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("–ù–∞ 5 –¥–Ω–µ–π", callback_data='FIFD')

            markup.add(item1)

            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã.',
                             reply_markup=markup)


class SiteScraperFactory():
    @staticmethod
    def scraper(news):
        try:
            if news == 'TUTScraperWorld':
                return TUTScraperWorld()
            if news == 'GRODNOScraper':
                return GRODNOScraper()
            if news == 'WeatherCheck':
                return WeatherCheck()
            raise AssertionError('Scraper is not defined')
        except AssertionError:
            print('AssertionError')


#–ø—Ä–∏–≤—è–∑–∫–∞ –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    news_world = SiteScraperFactory.scraper('TUTScraperWorld')
    art_world = news_world.articles()
    news = SiteScraperFactory.scraper('GRODNOScraper')
    art = news.articles()
    weath_check = SiteScraperFactory.scraper('WeatherCheck')
    art_weath = weath_check.articles()
    try:
        if call.message:
            if call.data == 'WRLD':
                bot.send_message(call.message.chat.id, art_world)
                markup = types.InlineKeyboardMarkup(row_width=2)
                item1 = types.InlineKeyboardButton("–ú–∏—Ä", callback_data='WRLD')
                item2 = types.InlineKeyboardButton("–ì—Ä–æ–¥–Ω–æ", callback_data='GRDN')

                markup.add(item1, item2)

                bot.send_message(call.message.chat.id, '–ö–∞–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ —á–∏—Ç–∞—Ç—å?', reply_markup=markup)

            elif call.data == 'GRDN':
                bot.send_message(call.message.chat.id, art)
                markup = types.InlineKeyboardMarkup(row_width=2)
                item1 = types.InlineKeyboardButton("–ú–∏—Ä", callback_data='WRLD')
                item2 = types.InlineKeyboardButton("–ì—Ä–æ–¥–Ω–æ", callback_data='GRDN')

                markup.add(item1, item2)

                bot.send_message(call.message.chat.id, '–ö–∞–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ —á–∏—Ç–∞—Ç—å?', reply_markup=markup)

            elif call.data == 'FIFD':
                bot.send_message(call.message.chat.id, art_weath)

    except Exception as e:
        print(repr(e))


bot.polling(none_stop=True)